{"version":3,"sources":["components/Panel.js","components/Preview.js","components/Editor.js","App.js","serviceWorker.js","index.js"],"names":["Panel","props","react_default","a","createElement","name","className","onClick","icon","Preview","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","document","getElementById","innerHTML","marked","text","newClass","Panel_Panel","id","Component","Editor","onInput","markedCallback","type","editorText","App","_this","state","editorClass","previewClass","toggle","markedCb","bind","assertThisInitialized","handleEditor","handlePreview","e","setState","target","value","prevState","Editor_Editor","components_Preview","React","setOptions","breaks","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2fc94a8b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const Panel = (props) => {\r\n  return (\r\n    <header>\r\n      <span>{props.name}</span>\r\n      <div className='panel' onClick={props.onClick}><i className={props.icon}></i></div>\r\n    </header>\r\n  );\r\n}","import React, { Component } from 'react'\r\nimport marked from 'marked'\r\nimport { Panel } from './Panel'\r\n\r\nclass Preview extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  componentDidMount() {\r\n    document.getElementById('preview').innerHTML = marked(this.props.text)\r\n  }\r\n  componentDidUpdate() {\r\n    document.getElementById('preview').innerHTML = marked(this.props.text)\r\n  }\r\n  render() {\r\n    return (\r\n      <div className={this.props.newClass}>\r\n        <Panel name='Previewer' onClick={this.props.onClick} icon={this.props.icon}/>\r\n        <div id=\"preview\"></div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Preview","import React from 'react'\r\nimport { Panel } from './Panel'\r\n\r\nexport const Editor = (props) => {\r\n    return (\r\n      <div className={props.newClass}>\r\n        <Panel name='Editor' onClick={props.onClick} icon={props.icon}/>\r\n        <textarea onInput={props.markedCallback} id=\"editor\" type=\"text\">{editorText}</textarea>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport const editorText = `# Welcome to my React Markdown Previewer!\r\n\r\n## This is a sub-heading...\r\n### And here's some other cool stuff:\r\n  \r\nHeres some code, \\`<div></div>\\`, between 2 backticks.\r\n\r\n\\`\\`\\`\r\n// this is multi-line code:\r\n\r\nfunction anotherExample(firstLine, lastLine) {\r\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n    return multiLineCode;\r\n  }\r\n}\r\n\\`\\`\\`\r\n  \r\nYou can also make text **bold**... whoa!\r\nOr _italic_.\r\nOr... wait for it... **_both!_**\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\n\r\nThere's also [links](https://www.freecodecamp.com), and\r\n> Block Quotes!\r\n\r\nAnd if you want to get really crazy, even tables:\r\n\r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | ------------- \r\nYour content can | be here, and it | can be here....\r\nAnd here. | Okay. | I think we get it.\r\n\r\n- And of course there are lists.\r\n  - Some are bulleted.\r\n     - With different indentation levels.\r\n        - That look like this.\r\n\r\n\r\n1. And there are numbererd lists too.\r\n1. Use just 1s if you want! \r\n1. But the list goes on...\r\n- Even if you use dashes or asterisks.\r\n* And last but not least, let's not forget embedded images:\r\n\r\n![React Logo w/ Text](https://goo.gl/Umyytc)\r\n`","import React, { Component } from 'react'\nimport marked from 'marked'\nimport Preview from './components/Preview'\nimport { Panel } from './components/Panel'\nimport { Editor, editorText } from './components/Editor'\nimport './App.scss'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: editorText,\n      editorClass: 'editor-container',\n      previewClass: 'preview-container',\n      icon: 'fa fa-arrows-alt',\n      toggle: true\n    }\n    this.markedCb = this.markedCb.bind(this);\n    this.handleEditor = this.handleEditor.bind(this);\n    this.handlePreview = this.handlePreview.bind(this);\n  }\n  \n  markedCb(e) {\n    this.setState({\n      text: e.target.value\n    })\n  }\n  \n  handleEditor() {\n    if (this.state.toggle) {\n      this.setState({\n        editorClass: 'editor-container full-screen',\n        previewClass: 'hide',\n        icon: 'fa fa-compress'\n      })\n    } else {\n      this.setState({\n        editorClass: 'editor-container',\n        previewClass: 'preview-container',\n        icon: 'fa fa-arrows-alt'\n      })  \n    }\n    this.setState(prevState => ({\n      toggle: !prevState.toggle\n    }))\n  }\n  \n  handlePreview() {\n    if (this.state.toggle) {\n      this.setState({\n        previewClass: 'preview-container full-screen',\n        editorClass: 'hide',\n        icon: 'fa fa-compress'\n      })\n    } else {\n      this.setState({\n        previewClass: 'preview-container',\n        editorClass: 'editor-container',\n        icon: 'fa fa-arrows-alt'\n      })\n    } \n    this.setState(prevState => ({\n      toggle: !prevState.toggle\n    }))\n  }\n\n  render() {\n    return (\n      <div className=\"grid\">\n          <Editor markedCallback={this.markedCb} onClick={this.handleEditor} newClass={this.state.editorClass} icon={this.state.icon}/>\n        <Preview text={this.state.text} onClick={this.handlePreview} newClass={this.state.previewClass} icon={this.state.icon}/>\n      </div>\n    )\n  }\n}\n\nmarked.setOptions({\n  breaks: true\n});\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}